{"version":3,"sources":["ng://ngb-modal/lib/modal.service.ts","ng://ngb-modal/lib/modal.component.ts","ng://ngb-modal/lib/modal-footer.component.ts","ng://ngb-modal/lib/modal-content.component.ts","ng://ngb-modal/lib/modal-header.component.ts","ng://ngb-modal/lib/modal.module.ts"],"names":["ModalManager","componentFactoryResolver","this","size","modalClass","undefined","hideCloseButton","centered","backdrop","animation","keyboard","closeOnOutsideClick","backdropClass","Object","defineProperty","prototype","globalConfig","config","assign","setDefaults","setRootViewContainerRef","ref","modalHost","open","modalInstance","init","componentFactory","resolveComponentFactory","remove","componentRef_1","createComponent","setTimeout","instance","closeFactory","onClose","onOpen","close","_self","Injectable","args","providedIn","ComponentFactoryResolver","ModalComponent","modalManager","EventEmitter","Subject","settings","closeOnEscape","defaults","createBackDrop","_this","isOpened","document","body","appendChild","backdropElement","classList","add","window","modalRoot","nativeElement","focus","opened","emit","openObserver","next","removeChild","className","replace","closed","closeObserver","preventClosing","event","stopPropagation","asObservable","createElement","Component","selector","template","styles","Output","ViewChild","ModalFooterComponent","ngOnInit","ModalContentComponent","ModalHeaderComponent","ModalModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, ViewChild, ComponentFactoryResolver, ComponentRef, ViewContainerRef } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalManager {\n\n  private modalHost: ViewContainerRef;\n\n  private globalConfig : ModalConfig = {\n    size: \"md\",\n    modalClass: undefined,\n    hideCloseButton : false,\n    centered: false,\n    backdrop: true,\n    animation : true,\n    keyboard: true,\n    closeOnOutsideClick: true,\n    backdropClass: \"modal-backdrop\" \n  };\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  set defaults(config: ModalConfig) {\n    this.globalConfig = Object.assign(this.globalConfig, config);\n  }\n\n  setDefaults(config: ModalConfig){\n    this.globalConfig = Object.assign(this.globalConfig, config);    \n  }\n\n  get defaults() : ModalConfig {\n    return this.globalConfig;\n  }\n\n  setRootViewContainerRef(ref){\n    this.modalHost = ref;\n  }\n\n  open(modalInstance, config){\n    if(typeof modalInstance === \"object\"){\n      modalInstance.init(config);\n      modalInstance.open();\n      return modalInstance;\n    }else if(typeof modalInstance === \"function\"){\n      let componentFactory = this.componentFactoryResolver.resolveComponentFactory(modalInstance);\n      this.modalHost.remove();\n      let componentRef = this.modalHost.createComponent(componentFactory);\n      setTimeout(() => {\n        componentRef.instance['ModalComponent'].init(config);\n        componentRef.instance['ModalComponent'].open();        \n      })\n      componentRef.instance['onOpen'] = this.closeFactory();\n      componentRef.instance['onClose'] = componentRef.instance['ModalComponent'].onClose;\n      componentRef.instance['close'] = componentRef.instance['ModalComponent'].onOpen;\n     return componentRef.instance;\n    } \n\n  }\n\n  close(modalInstance){\n    modalInstance.close();\n  }\n\n  closeFactory(){\n    var _self = this;\n    return function() {\n      this['ModalComponent'].close();\n      _self.modalHost.remove();\n    }\n  }\n\n}\n\nexport interface ModalConfig {\n    title?: string,\n    size?: string | \"md\",\n    modalClass?: string | '',\n    hideCloseButton?: boolean | false,\n    centered?: boolean | false,\n    backdrop?: boolean | 'static' | true,\n    animation?: boolean | true,\n    keyboard?: boolean | true,\n    closeOnOutsideClick?: boolean | true,\n    backdropClass?: string | \"modal-backdrop\"\n}\n","import { Component, OnInit, Input, Output, OnDestroy, OnChanges, EventEmitter, ElementRef, ViewChild } from '@angular/core';\nimport { ModalManager } from './modal.service';\nimport { Subject, Observable } from 'rxjs';\n\ndeclare var document: any;\n\n@Component({\n  selector: 'modal',\n  template: `<div class=\"modal\" tabindex=\"-1\" role=\"dialog\" #modalRoot (keydown.esc)=\"settings?.keyboard ? close() : 0\" [ngStyle]=\"{ display: isOpened ? 'block' : 'none' }\" [ngClass]=\"{'fade': settings.animation}\" (click)=\"settings?.backdrop !== 'static' && settings?.closeOnOutsideClick ? close() : 0\">\n    <div [class]=\"'modal-dialog modal-'+ settings?.size + ' ' + settings?.modalClass\" (click)=\"preventClosing($event)\" [ngClass]=\"{'modal-dialog-centered': settings.centered}\">\n        <div class=\"modal-content\" tabindex=\"0\" *ngIf=\"isOpened\">\n            <div class=\"modal-header\">\n                <button *ngIf=\"!settings?.hideCloseButton\" type=\"button\" class=\"close\" [attr.aria-label]=\"settings?.cancelButtonLabel || 'Close'\" (click)=\"close()\"><span aria-hidden=\"true\">&times;</span></button>\n                <h4 class=\"modal-title\" *ngIf=\"settings?.title\">{{ settings?.title }}</h4>\n                <ng-content select=\"modal-header\"></ng-content>\n            </div>\n            <div class=\"modal-body\">\n                <ng-content select=\"modal-content\"></ng-content>\n            </div>\n            <div class=\"modal-footer\">\n                <ng-content select=\"modal-footer\"></ng-content>\n            </div>\n        </div>\n    </div>\n</div>`,\n  styles:[`.modal-dialog-centered {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    min-height: calc(100% - (0.5rem * 2));\n  }\n  @media (min-width: 576px) {\n    .modal-dialog-centered {\n      min-height: calc(100% - (1.75rem * 2));\n    }\n  }`]\n})\nexport class ModalComponent {\n\n  // //title of modal\n  // @Input() title;\n\n  // //size of modal. sm,lg,md\n  // @Input() size;\n\n  // //modalClass added to modal dialog\n  // @Input() modalClass;\n\n  // //hide close button\n  // @Input() hideCloseButton;\n\n  // //if modal is vertically centered\n  // @Input() centered\n\n  // //if backdrop is applied on modal\n  // @Input() backdrop\n\n  // //if true, animation is added to modal dialog\n  // @Input() animation;\n\n  // //listen to keyboard events\n  // @Input() keyboard;\n\n  // //close on outside click\n  // @Input() closeOnOutsideClick;\n\n  // //custom backdrop class\n  // @Input() backdropClass;\n\n  @Output() public opened = new EventEmitter(false);\n  @Output() public closed = new EventEmitter(false);\n\n  private openObserver = new Subject<any>();\n  private closeObserver = new Subject<any>();\n  \n  public isOpened = false;\n\n  @ViewChild(\"modalRoot\")\n  public modalRoot: ElementRef;\n  public settings;\n  private backdropElement: HTMLElement;\n\n  constructor(private modalManager : ModalManager) {\n    this.settings = {\n      closeOnEscape: true,\n      closeOnOutsideClick: true,\n      hideCloseButton: false,\n      backdrop: true\n    }\n  }\n\n  init(config) {\n    this.settings = Object.assign({}, this.modalManager.defaults, config);\n    this.createBackDrop();\n  }\n\n\n  open() {\n    if (this.isOpened)\n      return;\n    \n    document.body.appendChild(this.backdropElement);\n    document.body.classList.add(\"modal-open\");\n    this.isOpened = true;\n    window.setTimeout(() => {\n      this.modalRoot.nativeElement.classList.add('in');\n      this.modalRoot.nativeElement.focus();\n      this.opened.emit();\n      this.openObserver.next(true);\n    }, 0);\n  }\n\n  close() {\n    if (!this.isOpened)\n      return;\n\n    this.modalRoot.nativeElement.classList.remove('in');\n    document.body.removeChild(this.backdropElement);\n    document.body.className = document.body.className.replace(/modal-open\\b/, \"\");\n    window.setTimeout(() => {\n      this.isOpened = false;\n      this.closed.emit();\n      this.closeObserver.next(true);\n    }, 100);\n  }\n\n  public preventClosing(event: MouseEvent) {\n    event.stopPropagation();\n  }\n\n  onOpen(){\n    return this.openObserver.asObservable();\n  }\n\n  onClose(){\n    return this.closeObserver.asObservable();\n  }\n\n  private createBackDrop() {\n    this.backdropElement = document.createElement(\"div\");\n    this.backdropElement.classList.add(\"fade\");\n    this.backdropElement.classList.add(\"in\");\n    if (this.settings && this.settings.backdrop && this.settings.backdrop == true) {\n      this.backdropElement.classList.add(this.settings.backdropClass);\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'modal-footer',\n  template:`<ng-content></ng-content>`\n})\nexport class ModalFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'modal-content',\n  template: `<ng-content></ng-content>`\n})\nexport class ModalContentComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'modal-header',\n  template:`<ng-content></ng-content>`\n})\n\nexport class ModalHeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ModalComponent } from './modal.component';\nimport { ModalFooterComponent } from \"./modal-footer.component\";\nimport { ModalContentComponent } from \"./modal-content.component\";\nimport { ModalHeaderComponent } from \"./modal-header.component\";\n\nimport { ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [ModalComponent, ModalFooterComponent, ModalContentComponent, ModalHeaderComponent],\n  exports: [ModalComponent, ModalFooterComponent, ModalContentComponent, ModalHeaderComponent]\n})\nexport class ModalModule { }\n"]}